Credo example: Hello, world!

This article describes how to build a very simple C hello-world program
using the build tool credo.  It also picks apart what’s going on behind
the scenes.

	> crean std

Here is the trivial C program with which we'll start.

	> cat hello.c | sed 's,^,	,'
	#include <stdio.h>
	
	int main(void) {
		printf("Hello, world!\n");
		return(0);
	}

Credo handles both the writing and executing of the build system.
It replaces makefiles with a set of shell commands which write the
build system for you.  The dependency graph and shell commands are
mostly provided in a library, so you don’t write build description files.
The credo tool suite includes commands to add to, and remove from, the
default dependencies of each target provided by the library.

The first step asks credo to customize a production from its library
for the files you want to produce.  In this case, we’ll compile directly
from a C source file to an executable using cc.

	> libdo (c cc c '') hello
	credo hello

This command prints “credo hello”, which is the second step, which
prints this.

	> credo hello
	os -d /usr/inferno/github/credo/test/1/credo/hello cc -o hello hello.c
	os -d /usr/inferno/github/credo/test/1/credo/hello ./hello

At this point the executable is ready, and running it with the last
line prints “Hello, world!”

	> os -d /usr/inferno/github/credo/test/1/credo/hello ./hello
	Hello, world!

So, what’s going on here?  First, the libdo command copies the shell
script /lib/do/c/cc.c..do from its library into the current directory,
and names it hello.do.

	> cat hello.do | sed 's,^,	,'
	#!/dis/sh
	bin = $1
	if {no $cc} {cc = cc}
	if {
		flag x  +
		os -d $osdir $cc $cflags $cppflags -o $bin $bin^.c
	} {
		echo os -d $osdir ./$bin
	}

“Credo hello” passes “hello” as the first parameter to hello.do,
which compiles the C source file into an executable.
