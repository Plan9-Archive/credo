	> load std
	flag x +
	> cre/rm std

Set up dependency chain for yacc file.

	> cre/libdo (c yacc y c) calcy.c
	> echo calcy.c > y.tab.h.tr
	> cre/libdo (c cc c o) calcy.o
	> cre/adddep calcy.o y.tab.h

Set up dependency chain for lex file.

	> cre/libdo (c lex l c) calcl.c
	> if {! cat calcl.c.dep} {raise 'no dep file for calcl.c'}
	> cre/libdo (c cc c o) calcl.o

Set up dependency for final binary, and build it.

	> cre/libdo (c cc no '') calc
	> cre/adddep calc calcy.o calcl.o
	> cre/do calc

Test that dependency files exist for the binary and for the lex object.

	> if {! cat calc.dep} {raise 'no generated dep file for calc'}
	> if {! cat calcl.o.dep} {raise 'no generated dep file for calcl.o'}

Test that the calculator works.

	> if {! ~ `{echo '2+2;' | host ./calc} 4} {raise 'incorrect result from binary (1)'}

	> lsenv
	> lssrc
	> cre/lsdo

Test that removing a file, on the direct chain of dependencies,
forces that file to rebuild.

	> rm calcy.c
	> cre/do calc
	> if {! ~ `{echo '2 + 2 ;' | host ./calc} 4} {raise 'incorrect result from binary (2)'}

Test that removing a file, added to the graph as a translated output file,
forces that file to rebuild.

	> rm y.tab.h
	> cre/do calc
	> if {! ~ `{echo '2	+	2	;' | host ./calc} 4} {raise 'incorrect result from binary (3)'}

	> grep -n . *.dep
