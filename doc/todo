Cre/libenvs reduces
	> cre/libenv (gtab.o CXXFLAGS) (gcmake CXXFLAGS standard)
	> cre/libenv (gtab.o CXXFLAGS) (gcmake CXXFLAGS warnings)
	> cre/libenv (gtab.o CXXFLAGS) (gcmake CXXFLAGS defines)
to
	> cre/libenvs (gtab.o CXXFLAGS) (gcmake CXXFLAGS standard warnings defines)
Ensure support for compound qualifiers (eg, 'standard gnu').

cre could store and retrieve, from a layover directory, files created
by programs called by os.  Order of relevant operations in cre:
Create $1 if it does not exist.  Move from $1 to '.' the list of files
in $1/$1.ls (if it exists).  Store the list of files in '.' in the file
$1/parent.ls.  Bind/command/unmount.  Compare $1/parent.ls to the
output of ls '.'.  For any new files, append them to the end of
$1/$1.ls and uniquely sort that file, and move all files in $1/$1.ls
to $1.  This seems complicated, inelegant, and asking for errors
and incompatibilities with other aspects of build systems.

Can we solve the “problem” that all output files are in the current
directory by laying over another directory with bind?  For example,
if $credir¹ contains the name of the directory in which we store
derived objects and credo-state files, then we create the directory
under the current directory if it doesn’t exist, bind the directory
(eg with a separate command crebind) and create all new files in that
directory while compiling.  Separate standalone command to unbind,²
so users can see the result in the current directory.
 ¹ Change current credir back to srcdir. 
 ² bind(1): The effects of bind and mount can be undone by unmount.
If two arguments are given to unmount, the effect is to undo a bind or
mount with the same arguments.

Inferno’s bind isn’t recognized by os commands.  In addition, bcu
doesn’t mean that new files created by os commands end up in the
overlay directory.  Is it enough to overlay only the files credo creates? 

Consider memfs(4) for created layover directory.

Fix reported¹ and recognized² bugs.
 ¹ web https://github.com/catenate/credo/issues
 ² man 1 credo | sed -n '/^BUGS/,$p'
man 1 dodep | sed -n '/^BUGS/,$p'

All os calls in env, dep, and do scripts should use $osdir.

Consider tree-trimming algorithm to turn dependency graph into
parallel passes: list targets with no dependencies that get built;
trim these targets from tree by building them; repeat.

Test credo’s parallelism across machines in a cluster. 

Add examples from “Recursive Make Considered Harmful” as tests.

Use $echo inshead of $crecho, and $srcdir instead of $credir.
In general, use credo-specific names for scripts and wholly internal
variables, and non-credo specific names for user-defined variables
used in do scripts, to allow do scripts to be compatible with other
redo implementations.

Add unicode substitution productions for various languages.¹
Start with the unicoper toascii.sed scripts.²
 ¹ (c sed uc c)
(go sed ugo go)
(haskell sed uhs hs)
(python sed upy py)
(ruby sed urb rb)
 ² https://github.com/catenate/unicoper/tree/master/substitute

Add version files in each /lib/do directory, to version these scripts.
For productions copied from other tools, store the version of the tool.

Add productions from Posix make in ¹, since it is the
standardized project management tool.
 ⁱ mkdir /github/credo/lib/do/sh-inferno/make

Add productions from GNU make in /lib/do/gnumake, since it is a
standard project management tool.

Port to bash so it's not limited to Inferno users.  In addition to the
credo tool scripts, all the library do scripts are also written for
Inferno's sh.  How to keep these two versions coherent?
If we automatically translate or add an abstraction layer, then we
lose the advantage that as scripts, they are completely changeable by
the user, who is likely to want to add things I don't know about.
The bash version is likely to be much more popular, and get forks
and changes, so I could just cherry-pick which changes I really like
and back-port them to the Inferno files.

Cache a header file’s #include list; update when the file changes.
Don’t rescan the entire header structure each time we create a C
file’s dep file.  Like cresum, findh caches for each header file
version its list of header files, as resolved by active -I directives.
So the active -I directives (listed in one known variable such as
/env/includes) should also be hashed and strored and compared.
So each line in findh’s cache (eg ./hdepcache)² would list ¹.
 ¹ path_header header_time header_size header_checksum includes_checksum path_include…
 ² Ideally we’d store this information right next to the header file,
in something like /path/include/header.h.includes, but ordinary users
don’t usually have write access to system or 3rd-party include dirs,
which change least and would most benefit from caching.

Consider porting to dash instead of bash, since it’s a newer de facto
linux shell.

For shell haters, and to be cross-platform, consider a Python port.
Not Perl.

For speed, and to embed concurrency, consider a C or Go port.
Go would be better for concurrency.  Not C++ or Java.

See where we could use ¹ instead of manually checking each *.dep line,
possibly as a quick check before loading and processing the *.dep file.
 ¹ sha1sum -c $target.dep.tmp	# first resolve $t, $targ, $target

Consider GNU parallel for map in bash port.  Consider lsmake for map
in lsf environments.  In general, ship several maps,¹ and let user
update map to refer to the one to use.
 ¹ bash/map: parallelmap
bash/mapfor: serial for loop
bash/maplsf: lsmake in LSF environments
bash/mapmakej: GNU make -j
bash/mapparallel: GNU parallel
sh-inferno/map: asyncmap
sh-inferno/mapapply: serial apply loop
sh-inferno/mapasync: <{}

It'd be useful if the /proc filesystem had, for each process,
"reads" and "writes" files, which lists which files a process opens.
The build tool, after it runs a command process, would update the
command's target's persistent (in credo) DAG: adding read files to
the target's dependency list; the target to dependency lists of
written files; and each written file to the target's *.redep file
(which lists other targets which depend the target).  The tool crelay
(which traverses *.redep files from a given file to its leaf targets)
could determine a minimal set of leaf targets which include all
written files, and possibly execute those targets to bring the system
up to date.¹
 ¹ os chrome 'https://groups.google.com/forum/?fromgroups=#!topic/redo-list/Oo53s5ETsU4'

In essence, [deletion of outdated intermediate files produced by an
old DAG] is a reference-counting, unreachability, garbage-collection
problem.  One approach would be to maintain reference counts.
Another would be to write a tool to compare what looks like targets,
against what is currently discoverable in the DAG.  Credo maintains
files (eg *.do) which identify files as a credo target.  We could
delete each such target for which its *.redep file (which lists which
files built it) either does not exist after a complete clean build,
contains no targets, or refers only to targets which do not (or no
longer) depend back on the checked target.¹
 ¹ os chrome 'https://groups.google.com/forum/?fromgroups=#!topic/redo-list/Oo53s5ETsU4'

Keep a rolling average of the build times for a particular target.
For a given build, add together all the build times for targets that
need built, and present the sum as an ETA for build completion.
This would require constructing the complete dependency graph
at the start of the build, which we don’t yet bother to do.
